import numpy as np
import unittest

import pycycle.green as green
from pycycle.mesh import InfiniteLineElement, tessellate_line
from pycycle.bem import assemble


class TestBEM(unittest.TestCase):
    def setUp(self):
        self.a = np.array((1, 1))
        self.b = np.array((2, 2))
        normal = (-1, 1)
        self.mesh1 = tessellate_line(self.a, self.b, np.sqrt(2) / 8.0, normal)
        self.mesh2 = [InfiniteLineElement(-self.a, normal)]
        self.mesh2 += tessellate_line(self.a, self.b, np.sqrt(2) / 2.0, normal)
        self.mesh2 += [InfiniteLineElement(self.b, normal)]

    def test_assemble1(self):
        A = assemble(green.G, self.mesh1)
        A_ref = np.array([[
            0.09639054133451744, 0.05002654593052053, 0.029551160769275796,
            0.017976064197639696, 0.009824422016652375, 0.003519722760060333,
            -0.00162427448440361, -0.005969956775823074
        ],
                          [
                              0.05002654593052053, 0.09639054133451744,
                              0.05002654593052053, 0.029551160769275796,
                              0.017976064197639696, 0.009824422016652375,
                              0.003519722760060333, -0.00162427448440361
                          ],
                          [
                              0.029551160769275796, 0.05002654593052053,
                              0.09639054133451744, 0.05002654593052053,
                              0.029551160769275796, 0.017976064197639696,
                              0.009824422016652375, 0.003519722760060333
                          ],
                          [
                              0.017976064197639696, 0.029551160769275796,
                              0.05002654593052053, 0.09639054133451744,
                              0.05002654593052053, 0.029551160769275796,
                              0.017976064197639696, 0.009824422016652375
                          ],
                          [
                              0.009824422016652375, 0.017976064197639696,
                              0.029551160769275796, 0.05002654593052053,
                              0.09639054133451744, 0.05002654593052053,
                              0.029551160769275796, 0.017976064197639696
                          ],
                          [
                              0.003519722760060333, 0.009824422016652375,
                              0.017976064197639696, 0.029551160769275796,
                              0.05002654593052053, 0.09639054133451744,
                              0.05002654593052053, 0.029551160769275796
                          ],
                          [
                              -0.00162427448440361, 0.003519722760060333,
                              0.009824422016652375, 0.017976064197639696,
                              0.029551160769275796, 0.05002654593052053,
                              0.09639054133451744, 0.05002654593052053
                          ],
                          [
                              -0.005969956775823074, -0.00162427448440361,
                              0.003519722760060333, 0.009824422016652375,
                              0.017976064197639696, 0.029551160769275796,
                              0.05002654593052053, 0.09639054133451744
                          ]])
        self.assertEqual(A.shape[0], A.shape[1])
        self.assertEqual(A.shape[0], A_ref.shape[0])
        self.assertEqual(A.shape[1], A_ref.shape[1])
        M = A_ref.shape[1]
        for i in range(M):
            for j in range(M):
                self.assertAlmostEqual(A[i, j], A_ref[i, j])

    def test_assemble2(self):
        A = assemble(green.G_fs, self.mesh2)
        A_ref = np.array([[
            -0.41079608885528335, -0.22188729466733317, -0.2704292017249441,
            -1.9513023052819096
        ],
                          [
                              -0.7517995851187582, 0.12642804872698737,
                              -0.08100441162623273, -1.6775479764351007
                          ],
                          [
                              -0.8068292724290365, -0.0811688118711888,
                              0.08856328281487719, -1.5675753940751003
                          ],
                          [
                              -0.8326483007021639, -0.1401277797332982,
                              0.002520986278272498, -1.4456438938669798
                          ]])
        self.assertEqual(A.shape[0], A.shape[1])
        self.assertEqual(A.shape[0], A_ref.shape[0])
        self.assertEqual(A.shape[1], A_ref.shape[1])
        M = A_ref.shape[1]
        for i in range(M):
            for j in range(M):
                self.assertAlmostEqual(A[i, j], A_ref[i, j])


if __name__ == '__main__':
    unittest.main()
